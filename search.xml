<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/10/01/JavaWeb/"/>
      <url>/2022/10/01/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Servlet"><a href="#一-Servlet" class="headerlink" title="一.Servlet"></a>一.Servlet</h2><h3 id="1-servlet生命周期"><a href="#1-servlet生命周期" class="headerlink" title="1. servlet生命周期"></a>1. servlet生命周期</h3><ul><li><p>加载和实例化：默认情况下，当Servlet第一次被访问时，由Tomcat容器创建对象。</p></li><li><p>初始化：在Servlet实例化之后，容器将会调用Servlet的init()方法来初始化对象，完成一些加载配置文件等初始化工作，只会被调用一次。</p><blockquote><p>可以通过loadOnStartup来修改Servlet的创建时机</p><p>@WebServlet(urlPatterns&#x3D;”&#x2F;demo” , loadOnStartup&#x3D; -1)</p><ul><li>负整数：在第一次被访问时创建servlet对象</li><li>0或正整数：在服务器启动时创建servlet对象，数字越小优先级越高</li></ul></blockquote></li><li><p>请求处理：每次请求Servlet时，容器都会调用Servlet的service()方法来处理请求，会执行多次。</p></li><li><p>服务终止：当需要内存释放或服务器关闭时，容器会调用Servlet的destroy()方法完成资源的释放。</p></li></ul><h3 id="2-Servlet-urlPattern-配置"><a href="#2-Servlet-urlPattern-配置" class="headerlink" title="2. Servlet  urlPattern 配置"></a>2. Servlet  urlPattern 配置</h3><h5 id="2-1-一个Servlet可以配置多个urlPattern"><a href="#2-1-一个Servlet可以配置多个urlPattern" class="headerlink" title="2.1 一个Servlet可以配置多个urlPattern"></a>2.1 一个Servlet可以配置多个urlPattern</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="2-2-urlPattern-配置规则"><a href="#2-2-urlPattern-配置规则" class="headerlink" title="2.2  urlPattern 配置规则"></a>2.2  urlPattern 配置规则</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209190849480.png"></p><h2 id="二-Request-amp-Response"><a href="#二-Request-amp-Response" class="headerlink" title="二. Request &amp; Response"></a>二. Request &amp; Response</h2><h3 id="1-Request"><a href="#1-Request" class="headerlink" title="1. Request"></a>1. Request</h3><h4 id="1-1-request-获取请求数据"><a href="#1-1-request-获取请求数据" class="headerlink" title="1.1 request 获取请求数据"></a>1.1 request 获取请求数据</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209181713763.png"></p><h4 id="1-2-request-通用方式获取请求参数"><a href="#1-2-request-通用方式获取请求参数" class="headerlink" title="1.2 request 通用方式获取请求参数"></a>1.2 request 通用方式获取请求参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; getParameterMap():获取所有参数map集合</span><br><span class="line"></span><br><span class="line">String[] getParameterValues(String name):根据名称获取参数值（数组）</span><br><span class="line"></span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span>:根据名称获取参数值（单个值）</span><br></pre></td></tr></table></figure><h4 id="1-3-解决Post请求参数中文乱码"><a href="#1-3-解决Post请求参数中文乱码" class="headerlink" title="1.3 解决Post请求参数中文乱码"></a>1.3 解决Post请求参数中文乱码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为post请求方式底层获取参数是通过获取字符输入流来获取信息的，所以只要设置字符输入流的编码就可以</span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-4-解决Get请求参数中文乱码"><a href="#1-4-解决Get请求参数中文乱码" class="headerlink" title="1.4 解决Get请求参数中文乱码"></a>1.4 解决Get请求参数中文乱码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="comment">//URL编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> URLEncoder.encode(username, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(encode); <span class="comment">//%E5%BC%A0%E4%B8%89</span></span><br><span class="line"><span class="comment">//URL解码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">decode</span> <span class="operator">=</span> URLDecoder.decode(encode, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(decode); <span class="comment">//张三</span></span><br><span class="line"><span class="comment">//而GET请求方式乱码是因为用ISO-8859-1来解码的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">decode1</span> <span class="operator">=</span> URLDecoder.decode(encode, <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">System.out.println(decode1); <span class="comment">//å¼ ä</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方法：</span></span><br><span class="line"><span class="comment">//转化为字节数据</span></span><br><span class="line"><span class="type">byte</span>[] bytes = decode1.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line"><span class="comment">//将字节数组转化为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209182109650.png"></p><h4 id="1-5-request请求转发"><a href="#1-5-request请求转发" class="headerlink" title="1.5 request请求转发"></a>1.5 request请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;资源路径&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>请求转发间资源共享数据：</p><ul><li>void setAttribute(String name, Object o)存储数据到request域中</li><li>Object getAttribute(String name)    根据key，获取值</li><li>void removeAttribute(String name)    根据key，移除键值对</li></ul><blockquote><p>请求转发特点：</p><p>1.浏览器地址不发生改变</p><p>2.只能转发到当前服务器内部的资源</p><p>3.一次请求，可以在转发的资源间使用request共享数据</p></blockquote><h3 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h3><h4 id="2-1-response-完成重定向"><a href="#2-1-response-完成重定向" class="headerlink" title="2.1 response 完成重定向"></a>2.1 response 完成重定向</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;跳转的资源路径&quot;</span>); <span class="comment">//需要加上虚拟目录</span></span><br></pre></td></tr></table></figure><blockquote><p>重定向特点：</p><p>1.浏览器地址发生变化</p><p>2.可以重定向到任意的资源（服务器内部或外部）</p><p>3.两次请求，不能在多个资源间使用request共享数据</p></blockquote><p>路径问题：需要明确路径谁来使用，如果浏览器来使用，需要加上虚拟目录(ps:重定向)；如果服务端使用，则不需要(ps:请求转发).</p><h4 id="2-2-response-响应字符数据"><a href="#2-2-response-响应字符数据" class="headerlink" title="2.2 response 响应字符数据"></a>2.2 response 响应字符数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应内容和编码，防止中文乱码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取字符输出流</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-3-response-响应字节数据"><a href="#2-3-response-响应字节数据" class="headerlink" title="2.3 response 响应字节数据"></a>2.3 response 响应字节数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;资源路径&quot;</span>);</span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种流的copy</span></span><br><span class="line">      <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//第二种简化的流的copy，用到了IOUtils工具类</span></span><br><span class="line">IOUtils.copy(fis,os);</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><h2 id="三-会话跟踪技术"><a href="#三-会话跟踪技术" class="headerlink" title="三. 会话跟踪技术"></a>三. 会话跟踪技术</h2><h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h3><h4 id="1-1-发送cookie"><a href="#1-1-发送cookie" class="headerlink" title="1.1 发送cookie"></a>1.1 发送cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><h4 id="1-2-获取cookie"><a href="#1-2-获取cookie" class="headerlink" title="1.2 获取cookie"></a>1.2 获取cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-cookie存活时间"><a href="#1-3-cookie存活时间" class="headerlink" title="1.3 cookie存活时间"></a>1.3 cookie存活时间</h4><ul><li>默认情况下，Cookie存在于浏览器的内存中，当浏览器关闭，Cookie自动销毁。</li><li>可通过setMaxAge(int seconds) 设置Cookie存活时间：<ul><li>正整数：将Cookie写入到浏览器所在的硬盘内，持久化存储，到时间自动销毁.</li><li>负整数：默认值，Cookie存在于浏览器的内存中，当浏览器关闭，Cookie自动销毁.</li><li>零：删除对应Cookie.</li></ul></li><li>默认情况下，Cookie不支持存储中文，若要存中文，则需要使用URL编码.</li></ul><h3 id="2-Session"><a href="#2-Session" class="headerlink" title="2. Session"></a>2. Session</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209212152890.png"></p><h4 id="2-2-Session-底层原理"><a href="#2-2-Session-底层原理" class="headerlink" title="2.2 Session 底层原理"></a>2.2 Session 底层原理</h4><p>Session底层需要依靠Cookie来实现。当浏览器第一次请求Servlet资源时，执行完代码后当要给客户端做出响应时，Tomcat发现我们创建了一个Session对象，这个Session对象会有一个ID值，于是Tomcat就会自动把ID值当作一个Cookie发送给客户端浏览器。当客户端访问另外一个资源时，浏览器会携带Cookie值，当我们需要创建一个Session对象时，若发现有ID值，则不会创建新的Session，因此可以实现资源间数据的共享。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209212211197.png"></p><h4 id="2-3-Session-细节"><a href="#2-3-Session-细节" class="headerlink" title="2.3 Session 细节"></a>2.3 Session 细节</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209212230373.png"></p><h2 id="四-Filter"><a href="#四-Filter" class="headerlink" title="四. Filter"></a>四. Filter</h2><blockquote><p>Filter 表示过滤器，可以把对资源的访问拦截下来实现一些通用的操作，比如权限控制，统一编码处理等。</p></blockquote><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><ul><li>定义类，实现Filter接口并重写其方法</li><li>配置Filter拦截资源的路径，在类上定义@WebFilter 注解</li><li>在doFilter方法中输出一句话并放行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter被执行了...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Filter-执行流程"><a href="#2-Filter-执行流程" class="headerlink" title="2. Filter 执行流程"></a>2. Filter 执行流程</h3><ul><li>客户端访问资源 —&gt; Filter 过滤器 —&gt; 放行前逻辑，一般对request数据进行处理 —&gt; 放行 —&gt; 访问到对应资源 —&gt; 服务端响应 —&gt; 返回到过滤器中 —&gt; 放行后逻辑，一般对response中的数据处理 —&gt; 客户端得到响应</li></ul><h3 id="3-Filter-拦截资源路径配置"><a href="#3-Filter-拦截资源路径配置" class="headerlink" title="3. Filter 拦截资源路径配置"></a>3. Filter 拦截资源路径配置</h3><ul><li>拦截具体的资源：index.jsp :只有访问index.jsp时才会被拦截</li><li>目录拦截：&#x2F;user&#x2F;*：拦截&#x2F;user目录下的所有资源</li><li>后缀名拦截：*.jsp：拦截所有后缀名为jsp的资源</li><li>拦截所有：&#x2F;*：拦截所有资源</li></ul><h3 id="4-过滤器链"><a href="#4-过滤器链" class="headerlink" title="4. 过滤器链"></a>4. 过滤器链</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209230854705.png"></p><h2 id="五-Listener"><a href="#五-Listener" class="headerlink" title="五. Listener"></a>五. Listener</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209231908500.png"></p><blockquote><p>只需要简单了解即可，后面框架部分会学到。</p></blockquote><h2 id="六-Ajax-amp-Axios"><a href="#六-Ajax-amp-Axios" class="headerlink" title="六. Ajax &amp; Axios"></a>六. Ajax &amp; Axios</h2><h3 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><ul><li><pre><code class="javascript">  //创建核心对象  var xhttp;  if (window.XMLHttpRequest) &#123;      xhttp = new XMLHttpRequest();  &#125; else &#123;      // code for IE6, IE5      xhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);  &#125;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">    //发送请求</span><br><span class="line">    xhttp.open(&quot;GET&quot;, &quot;http://localhost:8080/ajax-demo/ajaxServlet&quot;); //请求路径要写全类名</span><br><span class="line">    xhttp.send();</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="javascript">  //服务器响应      xhttp.onreadystatechange = function() &#123;      if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;              //alert(this.responseText);      &#125;</code></pre></li></ul><h3 id="2-Axios"><a href="#2-Axios" class="headerlink" title="2. Axios"></a>2. Axios</h3><h4 id="2-1-基本使用-1"><a href="#2-1-基本使用-1" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209242114435.png"></p><h4 id="2-2-Axios-请求方式别名"><a href="#2-2-Axios-请求方式别名" class="headerlink" title="2.2 Axios 请求方式别名"></a>2.2 Axios 请求方式别名</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209242124377.png"></p><h3 id="3-Json数据和Java对象转换"><a href="#3-Json数据和Java对象转换" class="headerlink" title="3. Json数据和Java对象转换"></a>3. Json数据和Java对象转换</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8083/202209242156178.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/09/hello-world/"/>
      <url>/2022/09/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
